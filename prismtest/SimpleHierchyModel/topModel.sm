// File generated by SBML-to-PRISM converter
// Original file: SimpleHierchyModel/topModel.xml
// @GeneticLogicLab

ctmc

// const int MAX_AMOUNT = ADD VALUE 

// Compartment size
const double Cell = 1.0;

// Model parameters
const double kr_f = 0.5; // Forward repression binding rate
const double kr_r = 1.0; // Reverse repression binding rate
const double ka_f = 0.0033; // Forward activation binding rate
const double ka_r = 1.0; // Reverse activation binding rate
const double ko_f = 0.033; // Forward RNAP binding rate
const double ko_r = 1.0; // Reverse RNAP binding rate
const double kao_f = 1.0; // Forward activated RNAP binding rate
const double kao_r = 1.0; // Reverse activated RNAP binding rate
const double nc = 2.0; // Stoichiometry of binding
const double nr = 30.0; // Initial RNAP count
const double ko = 0.05; // Open complex production rate
const double kb = 1.0E-4; // Basal production rate
const double ng = 2.0; // Initial promoter count
const double np = 10.0; // Stoichiometry of production
const double ka = 0.25; // Activated production rate
const double kd = 0.0075; // Degradation rate
const double C1__kr_f = 0.5; // Forward repression binding rate
const double C1__kr_r = 1.0; // Reverse repression binding rate
const double C1__ka_f = 0.0033; // Forward activation binding rate
const double C1__ka_r = 1.0; // Reverse activation binding rate
const double C1__ko_f = 0.033; // Forward RNAP binding rate
const double C1__ko_r = 1.0; // Reverse RNAP binding rate
const double C1__kao_f = 1.0; // Forward activated RNAP binding rate
const double C1__kao_r = 1.0; // Reverse activated RNAP binding rate
const double C1__nc = 2.0; // Stoichiometry of binding
const double C1__nr = 30.0; // Initial RNAP count
const double C1__ko = 0.05; // Open complex production rate
const double C1__kb = 1.0E-4; // Basal production rate
const double C1__ng = 2.0; // Initial promoter count
const double C1__np = 10.0; // Stoichiometry of production
const double C1__ka = 0.25; // Activated production rate
const double C1__kd = 0.0075; // Degradation rate

// Species S2
// const int S2_MAX = MAX_AMOUNT;
module S2

  // S2 : [0..S2_MAX] init 60;
  S2  :  int init 60;


endmodule

// Species S3
// const int S3_MAX = MAX_AMOUNT;
module S3

  // S3 : [0..S3_MAX] init 0;
  S3  :  int init 0;

		// C1__Production_P0
		[C1__Production_P0] S3 >= 0 -> (S3'=S3+10);
		// Degradation_S3
		[Degradation_S3] S3 > 0 -> (S3'=S3-1);

endmodule

// Species C1__P0
// const int C1__P0_MAX = MAX_AMOUNT;
module C1__P0

  // C1__P0 : [0..C1__P0_MAX] init 2;
  C1__P0  :  int init 2;


endmodule

// Reaction rates
module reaction_rates

		// C1__Production_P0:  ->  S3 
		[C1__Production_P0]  ((C1__P0 * ((((C1__kb * C1__ko_f) / C1__ko_r) * C1__nr) + ((((C1__ka * C1__kao_f) / C1__kao_r) * C1__nr) * pow(((C1__ka_f / C1__ka_r) * S2) , C1__nc)))) / ((1 + ((C1__ko_f / C1__ko_r) * C1__nr)) + (((C1__kao_f / C1__kao_r) * C1__nr) * pow(((C1__ka_f / C1__ka_r) * S2) , C1__nc)))) > 0 -> (((C1__P0 * ((((C1__kb * C1__ko_f) / C1__ko_r) * C1__nr) + ((((C1__ka * C1__kao_f) / C1__kao_r) * C1__nr) * pow(((C1__ka_f / C1__ka_r) * S2) , C1__nc)))) / ((1 + ((C1__ko_f / C1__ko_r) * C1__nr)) + (((C1__kao_f / C1__kao_r) * C1__nr) * pow(((C1__ka_f / C1__ka_r) * S2) , C1__nc))))) : true;

		// Degradation_S3:  ->  
		[Degradation_S3]  (C1__kd * S3) > 0 -> ((C1__kd * S3)) : true;

endmodule

// Reward structures (one per species)
// Reward 1: S2
rewards "S2" true : S2; endrewards
// Reward 2: S3
rewards "S3" true : S3; endrewards
// Reward 3: C1__P0
rewards "C1__P0" true : C1__P0; endrewards
